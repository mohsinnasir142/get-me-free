Final Year Project: Game Development

1.Engine: 
The Engine make the game proceed in small discrete steps of time. The Engine manages to synchronize a periodic drawing and updating of the Scene, which contains all the content that your game is currently handling actively

LimitedFPSEngine:  tries to achieve a specific amount of updates per second.

IResolutionPolicy: 

An implementation of the IResolutionPolicy interface is part of the EngineOptions. It tells AndEngine how to deal with the different screen-sizes of different devices. i.e 
RatioResolutionPolicy: keep everything scaled in the proper ratio .. Black Lines might occur.

FillResolutionPolicy: Fill whole resolution .... image might be stretched.

2. Camera:
	A Camera defines the rectangle of the scene that is drawn on the screen, as not the whole scene is visible all the time. Usually there is one Camera per Scene. There are subclasses with more functions, i.e

Bound Camera: you might specify bounds for your scene.
Zoom Camera: you might enable zooming, pinch zoom, and scrolling camera.

3. DisplayMetrics:

A structure describing general information about a display, such as its size, density, and font scaling.

Window Manager getWindowManager:
Retrieve the window manager for showing custom windows.

Display getDefaultDisplay:
Returns the Display upon which this WindowManager instance will be create new windows.

4. Vertex buffer object (VBO):
	It creates "buffer objects" for vertex attributes in high-performance memory on the server side and provides same access functions to reference the arrays, which are used in vertex arrays

5. Scene:
	The Scene class is the root container for all objects to be drawn on the screen. A Scene has a specific amount of Layers, which themselves can contain a (fixed or dynamic) amount of Entities.

	HUD: It is the acronym of head-up display and represents all those parts of the user interface that are placed on a fixed position on the display. like scoreboards.

6. scene manager to handle these 5 tasks:

Creating an enum of all of our scenes, which will help us to manage all of the scenes.
Load the resources of just our splash screen and display the splash scene.
Set up all of our scenes and load all other resources for our game.
Has a method to set the current scene within our game.
Has a method to return the currently set scene.

7. Splash Screen: A splash screen is an image that appears while a game or program is loading.Splash screens cover the entire screen or simply a rectangle near the center of the screen. 

8. Textures are like one giant canvas where you can place smaller images on that are called TextureSources. Width/height of a texture have to be a power of two.
As the images you usually use are not necessarily a power of two, there are so called TextureRegions that can be any size.

Texture Region: TextureRegions are the areas inside a Texture that are used for the sprites. Defines a rectangular area of a texture. The coordinate system used has its origin in the upper left corner with the x-axis pointing to the right and the y axis pointing downwards.

BitmapTextureAtlas: The BitmapTextureAtlas is the picture that is loaded into the memory.  It will be the final product. AndEngine allows you to dynamically fill in those blank spaces with different images in order to make a single Texture Atlas- one image.

TextureManager: read the data in a buffer where you know the format. convert data from pixel surface to a texture.

TextureOptions: Texture options menu allows to modify how the textures (including sprites and any other image) are sent to the video chipset by the OpenGL renderer.

- NEAREST: This texture option is applied to texture atlases by default. This is the fastest-performing texture option then BILINEAR. we can apply to a texture atlas, but also the poorest in quality. 

- BILINEAR: Slower than NEAREST, but looks better. This approach takes a hit performance-wise, but the quality of scaled sprites will increase, as not only one pixel from the texture is fetched but the 4 nearest.

The following are a few additional texture options:

Repeating: The repeating texture option allows the sprite to "repeat" the texture assuming that the ITextureRegion object's width and height has been exceeded by the size of the sprite. In most games, the terrain is usually generated by creating a repeating texture and stretching the size of the sprite, rather than creating many separate sprites to cover the ground.

Pre-multiply alpha: Lastly, we have the option to add the pre-multiply alpha texture option to our textures. What this option does is multiply each of the RGB values by the specified alpha channel and then apply the alpha channel in the end. The main purpose of this option is to allow us to modify the opacity of the colors without loss of color. Keep in mind, modifying the alpha value of a sprite directly may introduce unwanted effects when using pre-multiplied alpha values. Sprites will likely not appear fully transparent when this option is applied to sprites with an alpha value of 0.

BitmapTextureAtlasTextureRegionFactory: It is the device built into AndEngine that puts the textures together.

we are applying a specified image to the mBitmapTextureAtlas object as well as defining where, exactly, that image will be placed on the atlas. Using the BitmapTextureAtlasTextureRegionFactory class, we can call the createFromAsset(pBitmapTextureAtlas, pContext, pAssetPath, pTextureX, pTextureY) method, which makes creating the texture region a piece of cake

9. Sprites: A sprite is a two-dimensional image or animation that is integrated into a larger scene.


10.

11.

12.

13.
Screen Resolution Detects

320 x 240 is the smallest resolution I believe. Have tried this on my device which has 800 x 480 resolution and all works fine

 DisplayMetrics mDM = new DisplayMetrics();
 getWindowManager().getDefaultDisplay().getMetrics(mDM);
               
  int CAMERA_WIDTH = mDM.widthPixels;
  int CAMERA_HEIGHT = mDM.heightPixels;
               
  int SPRITE_X_SCALE = ((float)CAMERA_WIDTH / 320.0f);
  int SPRITE_Y_SCALE = ((float)CAMERA_HEIGHT / 240.0f);  
                               
  this.mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);

When defining a sprite do the following:

mySprite = new Sprite(0, 0, this.myTextureRegion);
mySprite.setScaleCenter(0, 0);
mySprite.setScale(SPRITE_X_SCALE, SPRITE_Y_SCALE);